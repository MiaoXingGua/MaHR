# 工作流名称，会显示在 GitHub Actions 界面中
name: install

# 触发条件：定义什么情况下触发工作流
on:
  # 推送时，满足以下条件之一会触发工作流
  push:
    # 当推送标签以 "v" 开头时触发（如 v1.0.0）
    tags:
      - "v*"
    # 当推送任意分支时触发
    branches:
      - "**"
    # 仅当修改以下路径时触发
    paths:
      - ".github/workflows/install.yml"  # 工作流文件本身
      - "assets/**"                      # assets 目录变更（代码路径）
      - "**.py"                          # 所有 Python 文件
  pull_request:
    # 当所有分支有拉取请求时触发
    branches:
      - "**"
    # 仅当修改以下路径时触发
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  # 允许手动触发工作流
  workflow_dispatch:

# 定义工作流任务
jobs:
  # 元数据处理任务：确定版本标签和发布状态
  meta:
    runs-on: ubuntu-latest  # 使用 Ubuntu 系统运行
    steps:
      - name: Checkout Code  # 拉取代码仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录（用于标签查询）

      - id: set_tag  # 步骤 ID，用于输出结果
        run: |
          # 判断当前是否为发布标签（以 refs/tags/v 开头）
          is_release=${{ startsWith(github.ref, 'refs/tags/v') }}
          # 获取当前引用的标签（若不是标签则可能为空）
          tag=$(git describe --tags --match "v*" ${{ github.ref }} || true)

          # 若标签格式不正确（不以 v 开头）
          if [[ $tag != v* ]]; then
            # 尝试从最新发布中获取标签
            tag=$(curl -sX GET "https://api.github.com/repos/${{ github.repository }}/releases/latest" --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | awk '/tag_name/{print $4}' FS='["]')
            # 若仍获取失败，使用默认标签 v0.0.0
            if [[ $tag != v* ]]; then
              tag="v0.0.0"
            fi
            # 生成带日期和 commit 的标签（如 v0.0.0-231001-abc123）
            tag=$(date "+$tag-%y%m%d-$(git rev-parse --short HEAD)")
          fi

          # 若非发布标签，添加 ci 前缀（如 v0.0.0-ci.231001-abc123）
          if ! $($is_release) ; then
            prefix=${tag%-*-*}
            suffix=${tag#$prefix-}
            tag="$prefix-ci.$suffix"
          fi

          # 输出标签和发布状态到工作流变量
          echo tag=$tag | tee -a $GITHUB_OUTPUT
          echo is_release=$is_release | tee -a $GITHUB_OUTPUT
    # 输出结果供其他任务使用
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      is_release: ${{ steps.set_tag.outputs.is_release }}

  # 安装任务：构建并打包安装文件
  install:
    needs: meta  # 依赖 meta 任务的输出
    runs-on: macos-latest  # 使用 macOS 系统运行
    strategy:
      # 多平台多架构矩阵
      matrix:
        # 修正系统和架构的映射关系，匹配实际文件名格式
        # os: [win, osx, linux]  # 目标操作系统
        # arch: [arm64, x64]     # 目标架构
        os: [win, macos, linux]
        arch: [x86_64, aarch64]  # 直接使用 x86_64 而非 x64
      fail-fast: false  # 一个矩阵失败不影响其他矩阵执行

    steps:
      - name: Checkout Code  # 拉取代码（包括子模块）
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download MaaFramework
        uses: robinraju/release-downloader@v1
        with:
            repository: MaaXYZ/MaaFramework
            fileName: 'MAA-${{ matrix.os }}-${{ matrix.arch }}*'
            # MAA-osx-arm64* #  MAA-macos-aarch64
            # MAA-win-x64* #  MAA-win-x86_64-v4.4.0.zip
            latest: true
            out-file-path: 'deps'
            extract: true

      - name: Install  # 执行安装脚本（）
        shell: bash
        run: |
          python ./install.py ${{ needs.meta.outputs.tag }}  # 传入标签参数

      - name: Download MFA  # 下载 MFAAvalonia 最新发布（排除 Android 平台）
        if: ${{ matrix.os != 'android' }}
        uses: robinraju/release-downloader@v1
        with:
          repository: SweetSmellFox/MFAAvalonia  # 仓库地址
          fileName: "MFAAvalonia-*-${{ matrix.os }}-${{ matrix.arch }}*"  # 匹配文件名
          latest: true  # 下载最新发布
          out-file-path: "MFAAvalonia"  # 输出目录
          extract: true  # 解压文件

      - name: Install MFAAvalonia  # 安装 MFAAvalonia 到目标目录
        if: ${{ matrix.os != 'android' }}
        shell: bash
        run: |
          rm -rf MFAAvalonia/resource/base/model  # 删除原有模型目录
          cp -r MFAAvalonia/* install  # 复制文件到 install 目录

      - name: Upload Artifacts  # 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: MaaXXX-${{ matrix.os }}-${{ matrix.arch }}  # 产物名称（含平台和架构）
          path: "install"  # 上传 install 目录

  # 发布任务：仅在正式发布时执行
  release:
    if: ${{ needs.meta.outputs.is_release == 'true' }}  # 仅当 is_release 为 true 时执行
    needs: install  # 依赖 install 任务完成
    runs-on: ubuntu-latest  # 使用 Ubuntu 系统运行
    steps:
      - name: Download Artifacts  # 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: assets  # 下载到 assets 目录

      - name: Package Artifacts  # 压缩产物为 ZIP
        run: |
          cd assets
          for f in *; do
            (cd $f && zip -r ../$f-${{ needs.meta.outputs.tag }}.zip .)  # 按平台架构压缩
          done

      - name: Create Release  # 创建 GitHub Release 并上传产物
        uses: softprops/action-gh-release@v2
        with:
          files: assets/*  # 上传 assets 目录下所有文件
          tag_name: ${{ needs.meta.outputs.tag }}  # 发布标签
          generate_release_notes: true  # 自动生成发布说明
