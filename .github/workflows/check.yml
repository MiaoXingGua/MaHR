# 定义工作流的名称为 "check"，将显示在 GitHub Actions 界面中
name: check

# 触发条件配置：定义在哪些情况下会运行该工作流
on:
  # 当代码推送到仓库时触发
  push:
    # 对所有分支生效（** 是通配符，表示匹配所有分支）
    branches:
      - "**"
    # 仅当修改以下路径的文件时才触发，限制运行范围以提高效率
    paths:
      - ".github/workflows/check.yml"  # 工作流配置文件本身被修改
      - "assets/**"                    # assets 目录下的所有文件或子目录被修改
      - "**.py"                        # 所有 Python 文件（.py 后缀）被修改

  # 当有拉取请求（PR）被创建或更新时触发
  pull_request:
    # 对所有分支的 PR 生效
    branches:
      - "**"
    # 仅当 PR 中修改以下路径的文件时才触发
    paths:
      - ".github/workflows/check.yml"  # 工作流配置文件本身
      - "assets/**"                    # assets 资源目录
      - "**.py"                        # 所有 Python 文件

  # 允许手动触发工作流（在 GitHub 界面点击 "Run workflow" 按钮）
  workflow_dispatch:

# 工作流包含的作业（jobs），每个作业在指定的运行环境中执行一系列步骤
jobs:
  # 定义一个名为 "resource" 的作业（可自定义名称，通常表示作业的用途）
  resource:
    # 指定作业运行的环境为最新版 macOS 系统
    runs-on: macos-latest

    # 作业包含的步骤（按顺序执行）
    steps:
      # 步骤 1：检出当前仓库的代码到运行环境中
      - uses: actions/checkout@v4  # 使用官方的 checkout 动作，版本为 v4
        with:
          fetch-depth: 0  # 拉取完整的仓库历史（默认只拉取最新版本，0 表示完整克隆）

      # 步骤 2：安装 maafw 工具（自定义步骤名称）
      - name: Install maafw
        # 运行的命令：先升级 pip，再安装预发布版本的 maafw
        run: |
            python -m pip install --upgrade pip  # 升级 pip 到最新版本
            python -m pip install --upgrade maafw --pre  # 安装/升级 maafw，--pre 允许预发布版本

      # 步骤 3：执行资源检查（自定义步骤名称）
      - name: Check Resource
        # 运行 Python 脚本检查资源文件，指定资源目录为 ./assets/resource/
        run: |
            python ./check_resource.py ./assets/resource/base
